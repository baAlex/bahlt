Just some notes. Please ignore...

https://developer.valvesoftware.com/wiki/Miptex


TEX_InitFromWad():
I should add .wad file lookups in:
-someNewParameterForWadFolder
bspFile.parent_path().parent_path().parent_path() / u8"valve" (with valve being configurable?)
..... I'll also need to look in addon and download folders.
// Perhaps with warnings for files that are not in the mod bspFile.parent_path() folder and
// not in the valve folder. Since the user might forget to include those files with their bsp.
// However, not if these WADs are -wadincluded.


For testing, these mods may have source files:
Hazardous Course 2, Field Intensity, Delta Particles


For testing model shadows https://twhl.info/vault/view/6031 can be used. Just set
"zhlt_studioshadow" "1"
"zhlt_shadowmode" "1"
on a couple of models. More info here https://gamebanana.com/tools/6306


For testing WAD files https://twhl.info/vault/view/6031 is interesting.
It has two "wad" fields:
"wad" "C:\Program Files (x86)\Steam\steamapps\common\Half-Life\valve\tools.wad;C:\Program Files (x86)\Steam\steamapps\common\Half-Life"
"wad" "\users\ulstaff\documents\modding\hl\programs\vluzacn's zhlt v30\tools\zhlt.wad;\program files\steam\steamapps\common\half-life\valve\decals.wad;\program files\steam\steamapps\common\half-life\valve\halflife.wad;\program files\steam\steamapps\common\half-life\valve\liquids.wad;\program files\steam\steamapps\common\half-life\valve\xmastree_tjb.wad"
Is it possible that Alabastor_Twob used Hammer 4 in the beginning? Because there are some strange properties on worldspawn such as
"detailmaterial" "detail/detailsprites"
"detailvbsp" "detail.vbsp"
"maxpropscreenwidth" "-1"



We should tolerate missing WADs but produce warnings.
This so we can compile .map files from others when they forget to include all the WADs



-estimate was on by default on Windows, and off by default on Linux.
I think it's useful to keep estimates on, but according to "just khang" on the TWHL Discord,
the stdout spam increases compile times significantly (a 10s compile becomes a 40s compile
in Trenchbroom in HLRAD alone).

Study:
https://developer.valvesoftware.com/wiki/BSP_(GoldSrc)
The Source article might have additional information https://developer.valvesoftware.com/wiki/BSP_(Source)
https://www.gamers.org/dEngine/quake/spec/quake-spec34/qkspec_4.htm

Looks interesting:
https://developer.valvesoftware.com/wiki/BSPX



For compiling the common/ files once (not per target):
https://stackoverflow.com/questions/5091583/cmake-reuse-object-files-built-for-a-lib-into-another-lib-target



See Version 33 in http://zhlt.info/version-history.html
Perhaps I can auto-enable those "fake"/embedded lightmaps for any transparent "{" textures.

Remove info_texlights entities from the output, as well as zhlt_studioshadow and zhlt_shadowmode keys

Sort key values (don't worry about the output order being different from the input order - SDHLT was already
*reversing* the order)


See if it's possible to compress textures by omitting mipmaps and using 0 (or other short) offsets,
since modern HL doesn't use the mipmaps in OpenGL mode

Properties and 
https://developer.valvesoftware.com/wiki/Template:Hl1_kv_zhlt


To apply changes in .clang-format:
find src -iname '*.h' -o -iname '*.cpp' | xargs ${HOMEBREW_PREFIX}/opt/llvm@18/bin/clang-format -i



Document zhlt_striprad: Strip lightmaps after compiling (boolean): Undefines the lightmaps for brushes on this entity after compiling, resulting in the faces being fullbright and not using up allocblock. Unlike TEX_SPECIAL, faces with zhlt_striprad will still affect bounced lighting.
Document zhlt_minsmaxs: Override this entity's bounding box.

https://developer.valvesoftware.com/wiki/Template:Hl1_kv_zhlt_point
https://developer.valvesoftware.com/wiki/Template:Hl1_kv_zhlt_light_source


When writing key-values to the .bsp file, in the end compiler-specific key-values (starting with zhlt_ or just a _) should be excluded. The game engine discards entities starting with _ so it should be safe


				std::filesystem::path wadCfgPath
					= std::filesystem::path(g_Mapname).parent_path().parent_path()
					/ "wad.cfg";

					// Look for wad.cfg relative to exe
					wadCfgPath = get_path_to_directory_with_executable(argv)
						/ "wad.cfg';


Check out https://developer.valvesoftware.com/wiki/Newbspguy - it might help with troubleshooting issues

https://twhl.info/wiki/page/Tutorial%253A_The_Complete_Guide_to_Lighting
